#include "xdp.h"

BPF_TABLE_PINNED("hash", uint32_t, struct map_value, v4filter, 1024, "/sys/fs/bpf/dnsdist/addr-v4");
BPF_TABLE_PINNED("hash", struct in6_addr, struct map_value, v6filter, 1024, "/sys/fs/bpf/dnsdist/addr-v6");
BPF_TABLE_PINNED("hash", struct dns_qname, struct map_value, qnamefilter, 1024, "/sys/fs/bpf/dnsdist/qnames");
BPF_TABLE_PINNED("prog", int, int, progsarray, 2, "/sys/fs/bpf/dnsdist/progs");

/*
 * bcc has added BPF_TABLE_PINNED7 to the latest commit of the master branch, but it has not yet been released.
 * https://github.com/iovisor/bcc/commit/fff25a8d4d445c6156b65aa8a4016ce0d78ab7fb
 */
#ifndef BPF_TABLE_PINNED7
#define BPF_TABLE_PINNED7(_table_type, _key_type, _leaf_type, _name, _max_entries, _pinned, _flags) \
  BPF_F_TABLE(_table_type ":" _pinned, _key_type, _leaf_type, _name, _max_entries, _flags)
#endif

BPF_TABLE_PINNED7("lpm_trie", struct CIDR4, struct map_value, cidr4filter, 1024, "/sys/fs/bpf/dnsdist/cidr4", BPF_F_NO_PREALLOC);
BPF_TABLE_PINNED7("lpm_trie", struct CIDR6, struct map_value, cidr6filter, 1024, "/sys/fs/bpf/dnsdist/cidr6", BPF_F_NO_PREALLOC);

/*
 * Recalculate the checksum
 * Copyright 2020, NLnet Labs, All rights reserved.
 */
static inline void update_checksum(uint16_t *csum, uint16_t old_val, uint16_t new_val)
{
  uint32_t new_csum_value;
  uint32_t new_csum_comp;
  uint32_t undo;

  undo = ~((uint32_t)*csum) + ~((uint32_t)old_val);
  new_csum_value = undo + (undo < ~((uint32_t)old_val)) + (uint32_t)new_val;
  new_csum_comp = new_csum_value + (new_csum_value < ((uint32_t)new_val));
  new_csum_comp = (new_csum_comp & 0xFFFF) + (new_csum_comp >> 16);
  new_csum_comp = (new_csum_comp & 0xFFFF) + (new_csum_comp >> 16);
  *csum = (uint16_t)~new_csum_comp;
}

/*
 * Set the TC bit and swap UDP ports
 * Copyright 2020, NLnet Labs, All rights reserved.
 */
static inline enum dns_action set_tc_bit(struct udphdr *udp, struct dnshdr *dns)
{
  uint16_t old_val = dns->flags.as_value;

  // change the DNS flags
  dns->flags.as_bits_and_pieces.ad = 0;
  dns->flags.as_bits_and_pieces.qr = 1;
  dns->flags.as_bits_and_pieces.tc = 1;

  // change the UDP destination to the source
  udp->dest   = udp->source;
  udp->source = bpf_htons(DNS_PORT);

  // calculate and write the new checksum
  update_checksum(&udp->check, old_val, dns->flags.as_value);

  // bounce
  return TC;
}

/*
 * Check DNS QName
 * Returns PASS if message needs to go through (i.e. pass)
 *         TC if (modified) message needs to be replied
 *         DROP if message needs to be blocke
 */
static inline enum dns_action check_qname(struct cursor *c)
{
  struct dns_qname qkey = {0};
  uint8_t qname_byte;
  uint16_t qtype;
  int length = 0;

  for(int i = 0; i<255; i++) {
  	if (bpf_probe_read_kernel(&qname_byte, sizeof(qname_byte), c->pos)) {
  		return PASS;
  	}
  	c->pos += 1;
  	if (length == 0) {
      if (qname_byte == 0 || qname_byte > 63 ) {
  		  break;
      }
      length += qname_byte;
  	} else {
      length--;
    }
  	if (qname_byte >= 'A' && qname_byte <= 'Z') {
  		qkey.qname[i] = qname_byte + ('a' - 'A');
  	} else {
  		qkey.qname[i] = qname_byte;
  	}
  }

  // if the last read qbyte is not 0 incorrect QName format), return PASS
  if (qname_byte != 0) {
  	return PASS;
  }

  // get QType
  if(bpf_probe_read_kernel(&qtype, sizeof(qtype), c->pos)) {
  	return PASS;
  }

  struct map_value* value;

  // check if Qname/Qtype is blocked
  qkey.qtype = bpf_htons(qtype);
  value = qnamefilter.lookup(&qkey);
  if (value) {
    __sync_fetch_and_add(&value->counter, 1);
  	return value->action;
  }

  // check with Qtype 255 (*)
  qkey.qtype = 255;

  value = qnamefilter.lookup(&qkey);
  if (value) {
    __sync_fetch_and_add(&value->counter, 1);
  	return value->action;
  }

  return PASS;
}

/*
 * Parse IPv4 DNS mesage.
 * Returns PASS if message needs to go through (i.e. pass)
 *         TC if (modified) message needs to be replied
 *         DROP if message needs to be blocked
 */
static inline enum dns_action udp_dns_reply_v4(struct cursor *c, struct CIDR4 *key)
{
  struct udphdr  *udp;
  struct dnshdr  *dns;

  if (!(udp = parse_udphdr(c)) || udp->dest != bpf_htons(DNS_PORT)) {
  	return PASS;
  }

  // check that we have a DNS packet
  if (!(dns = parse_dnshdr(c))) {
  	return PASS;
  }	

  // if the address is blocked, perform the corresponding action
  struct map_value* value = v4filter.lookup(&key->addr);

  if (value) {
    __sync_fetch_and_add(&value->counter, 1);
    if (value->action == TC) {
  	  return set_tc_bit(udp, dns);
    } else {
      return value->action;
    }
  }

  key->cidr = 32;
  key->addr = bpf_htonl(key->addr);
  value = cidr4filter.lookup(key);
  if (value) {
    __sync_fetch_and_add(&value->counter, 1);
    if (value->action == TC) {
      return set_tc_bit(udp, dns);
    }
    else {
      return value->action;
    }
  }

  enum dns_action action = check_qname(c);
  if (action == TC) {
    return set_tc_bit(udp, dns);
  }
  return action;
}

/*
 * Parse IPv6 DNS mesage.
 * Returns PASS if message needs to go through (i.e. pass)
 *         TC if (modified) message needs to be replied
 *         DROP if message needs to be blocked
 */
static inline enum dns_action udp_dns_reply_v6(struct cursor *c, struct CIDR6* key)
{
   struct udphdr  *udp;
   struct dnshdr  *dns;

  
  if (!(udp = parse_udphdr(c)) || udp->dest != bpf_htons(DNS_PORT)) {
  	return PASS;
  }

  // check that we have a DNS packet
  ;
  if (!(dns = parse_dnshdr(c))) {
  	return PASS;
  }

  // if the address is blocked, perform the corresponding action
  struct map_value* value = v6filter.lookup(&key->addr);

  if (value) {
    __sync_fetch_and_add(&value->counter, 1);
    if (value->action == TC) {
  	  return set_tc_bit(udp, dns);
    } else {
      return value->action;
    }
  }

  key->cidr = 128;
  value = cidr6filter.lookup(key);
  if (value) {
    __sync_fetch_and_add(&value->counter, 1);
    if (value->action == TC) {
      return set_tc_bit(udp, dns);
    }
    else {
      return value->action;
    }
  }

  enum dns_action action = check_qname(c);
  if (action == TC) {
    return set_tc_bit(udp, dns);
  }
  return action;
}

int xdp_dns_filter(struct xdp_md* ctx)
{
  // store variables
  struct cursor   c;
  struct ethhdr  *eth;
  uint16_t        eth_proto;
  struct iphdr   *ipv4;
  struct ipv6hdr *ipv6;
  int            r = 0;

  // initialise the cursor
  cursor_init(&c, ctx);

  // pass the packet if it is not an ethernet one
  if ((eth = parse_eth(&c, &eth_proto))) {
    // IPv4 packets
    if (eth_proto == bpf_htons(ETH_P_IP))
    {
      if (!(ipv4 = parse_iphdr(&c)) || bpf_htons(ipv4->protocol != IPPROTO_UDP)) {
        return XDP_PASS;
      }

      struct CIDR4 key;
      key.addr = bpf_htonl(ipv4->saddr);
      // if TC bit must not be set, apply the action
      if ((r = udp_dns_reply_v4(&c, &key)) != TC) {
        if (r == DROP) {
          progsarray.call(ctx, 0);
          return XDP_DROP;
        }
        return XDP_PASS;
      }

      // swap src/dest IP addresses
      uint32_t swap_ipv4 = ipv4->daddr;
      ipv4->daddr = ipv4->saddr;
      ipv4->saddr = swap_ipv4;
    }
    // IPv6 packets
    else if (eth_proto == bpf_htons(ETH_P_IPV6)) {
      if (!(ipv6 = parse_ipv6hdr(&c)) || bpf_htons(ipv6->nexthdr != IPPROTO_UDP)) {
        return XDP_PASS;
      }
      struct CIDR6 key;
      key.addr = ipv6->saddr;

      // if TC bit must not be set, apply the action
      if ((r = udp_dns_reply_v6(&c, &key)) != TC) {
        if (r == DROP) {
          progsarray.call(ctx, 0);
          return XDP_DROP;
        }
        return XDP_PASS;
      }

      // swap src/dest IP addresses
      struct in6_addr swap_ipv6 = ipv6->daddr;
      ipv6->daddr = ipv6->saddr;
      ipv6->saddr = swap_ipv6;
    }
    // pass all non-IP packets
    else {
      return XDP_PASS;
    }
  }
  else {
    return XDP_PASS;
  }

  // swap MAC addresses
  uint8_t swap_eth[ETH_ALEN];
  memcpy(swap_eth, eth->h_dest, ETH_ALEN);
  memcpy(eth->h_dest, eth->h_source, ETH_ALEN);
  memcpy(eth->h_source, swap_eth, ETH_ALEN);

  progsarray.call(ctx, 1);

  // bounce the request
  return XDP_TX;
}
