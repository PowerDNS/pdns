ALGORITHM=${ALGORITHM:="hmac-md5"}
KEY=${KEY:="kp4/24gyYsEzbuTVJRUMoqGFmN3LYgVDzJ/3oRSP7ys="}
if [ "$RUNWRAPPER" = "" ]; then
  RUNWRAPPER="authbind"
fi

export ALGORITHM
export KEY

port=$1
[ -z "$port" ] && port=53

trap "kill_process 2" EXIT INT TERM

prepare()
{
	local_prepare

	# load all zones
	for zone in example.com test.com; do
		$PDNSUTIL --config-name=${MODULE}-master --config-dir=. load-zone $zone zones/$zone
	done
	# create secondary
	$PDNSUTIL --config-name=${MODULE}-slave --config-dir=. create-secondary-zone example.com 127.0.0.1
	$PDNSUTIL --config-name=${MODULE}-slave --config-dir=. load-zone example.com zones/example.com
	# setup metadata on master
        $PDNSUTIL --config-name=${MODULE}-master --config-dir=. set-meta example.com ALLOW-AXFR-FROM 127.0.0.2
	$PDNSUTIL --config-name=${MODULE}-master --config-dir=. set-meta test.com ALLOW-AXFR-FROM 127.0.0.2
}

start_master()
{
        $RUNWRAPPER $PDNS --daemon=no --local-port=$port --config-dir=. --module-dir=../regression-tests/modules \
                --config-name=${MODULE}-master --socket-dir=./ --no-shuffle \
                --master=yes --local-address=127.0.0.1 \
                --query-local-address=127.0.0.1 --cache-ttl=$cachettl --dname-processing --allow-axfr-ips= &
}

start_slave()
{
        slaveport=53

        $RUNWRAPPER $PDNS --daemon=no --local-port=$slaveport --config-dir=. --module-dir=../regression-tests/modules \
                --config-name=${MODULE}-slave --socket-dir=./ --no-shuffle --local-address=127.0.0.2 \
                --slave --retrieval-threads=4 --slave=yes --autosecondary=yes --query-local-address=127.0.0.2 \
                --slave-cycle-interval=300 --allow-unsigned-notify=yes --allow-unsigned-supermaster=no &
}

check_process ()
{
        set +e
        loopcount=0
        while [ $loopcount -lt 5 ]; do
                sleep 1
                pids=$(cat pdns*.pid 2>/dev/null)
                if [ ! -z "$pids" ]
                then
                        kill -0 $pids >/dev/null 2>&1
                        if [ $? -eq 0 ]
                        then
                                set -e
                                return
                        fi
                fi
        let loopcount=loopcount+1
        done
        echo "PowerDNS did not start"
        exit
}

kill_process ()
{
        set +e
        trap - EXIT INT TERM

        if [ $1 -gt 1 ]
        then
                echo "exitvalue$1" >> failed_tests
        fi

        pids=$(cat pdns*.pid)

        if [ -n "$pids" ]
        then
                kill $pids
                # make sure they die.
                loopcount=0
                done=0
                while [ $loopcount -lt 10 ] && [ $done -eq 0 ]
                do
                        done=1
                        for pid in $pids
                        do
                                kill -0 $pid > /dev/null 2>&1
                                if [ $? -eq 0 ];
                                then
                                        done=0
                                fi
                        done
                        let loopcount=loopcount+1
                        sleep 1
                done

                kill -9 $pids
        fi

        rm pdns*.pid
        exit $1
}

notify_wait()
{
   # make sure domains are transferred and created
   domcount=0
   retries=15
   delay=1
   domains=2

   while [ $retries -ge 0 ]; do
     domcount=$($PDNSUTIL --config-dir=. --config-name=${MODULE}-master list-all-zones | wc -l)
     # at the moment we want two domains
     if [ $domcount -eq $domains ]; then
       break
     fi
     sleep $delay
     let retries=retries-1
   done

   if [ $domcount -ne $domains ]; then 
     echo "Supermaster provisioning failed"
     exit
   fi
}

prepare
start_slave
check_process
sleep 1
start_master
# to avoid locking issues later on
sleep 2

# then we check that test.com has not been transferred yet.
for domain in test.com; do
  reccount=$($PDNSUTIL --config-name=${MODULE}-slave --config-dir=. list-zone $domain | wc -l)
  if [ $reccount -ne 0 ]; then
    echo "Transfer of '$domain' has unexpectedly succeeded"
  fi
done

# setup autosecondary
$PDNSUTIL --config-name=${MODULE}-slave --config-dir=. add-autoprimary 127.0.0.1 ns1.example.com

# send notifications
$PDNSCONTROL --config-dir=. --config-name=${MODULE}-master --socket-dir=. notify test.com
sleep 2

# hopefully notifications have gone thru
notify_wait

# then we check that we got records in database for both domains
for domain in example.com test.com; do
  reccount=$($PDNSUTIL --config-name=${MODULE}-slave --config-dir=. list-zone $domain | wc -l)
  exp_reccount=$($PDNSUTIL --config-name=${MODULE}-master --config-dir=. list-zone $domain | wc -l)
  if [ $reccount -lt $exp_reccount ]; then
    echo "Transfer of '$domain' did not succeed"
  fi
done

# ensure unsigned notifications are refused
$NOTIFY 127.0.0.2:53 test.com 2>&1

kill_process 0
