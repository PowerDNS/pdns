#!/usr/bin/env bash
set -e
if [ "${PDNS_DEBUG}" = "YES" ]; then
  set -x
fi

export PDNS=${PDNS:-${PWD}/../pdns/pdns_server}
export PDNS2=${PDNS2:-${PWD}/../pdns/pdns_server}
export PDNSUTIL=${PDNSUTIL:-${PWD}/../pdns/pdnsutil}
export PDNSCONTROL=${PDNSCONTROL:-${PWD}/../pdns/pdns_control}
export RESOLVERIP=${RESOLVERIP:-8.8.8.8}


ALGORITHM=${ALGORITHM:="hmac-md5"}
KEY=${KEY:="kp4/24gyYsEzbuTVJRUMoqGFmN3LYgVDzJ/3oRSP7ys="}

MAKE=${MAKE:-make}

export ALGORITHM
export KEY

_show_help=0
for arg; do
    case "$arg" in
        (--help|help)
            _show_help=1
            ;;
    esac
done; unset -v arg
if [ "$_show_help" -eq 1 ]; then
	grep -v '^#' << '__EOF__'

Usage: ./start-test-stop <port> [<context>] [wait|nowait] [<cachettl>] [<specifictest>]

context is one of:
bind bind-dnssec bind-dnssec-nsec3 bind-dnssec-nsec3-optout bind-dnssec-nsec3-narrow
lmdb-nodnssec lmdb

* Add 'wait' (literally) after the context to not kill
  pdns_server immediately after testing. 'nowait' will kill it.

* A cachettl can be supplied if you want to run tests with a
  ttl setting set. The default cachettl is 0.
__EOF__
	exit
fi
unset -v _show_help

trap "kill_process 2" EXIT INT TERM

source ../regression-tests/common

bindwait ()
{
	check_process
	configname=$1
	domcount=$(grep -c ^zone named.conf)
	if [ ! -x $PDNSCONTROL ]
	then
		echo "No pdns_control found"
		exit
	fi
	loopcount=0

	while [ $loopcount -lt 20 ]
	do
		sleep 5
		done=$( ($PDNSCONTROL --config-name=$configname --socket-dir=. --no-config bind-domain-status || true) | grep -c 'parsed into memory' || true )
		if [ $done = $domcount ]
		then
			return
		fi
		let loopcount=loopcount+1
	done

	if [ $done != $domcount ]
	then
		echo "Domain parsing failed" >> failed_tests
	fi
}

securezone ()
{
	local zone=$1
	local configname=$2

	if [ -n "$configname" ]
	then
		configname="--config-name=$configname"
	fi
	if [ "${zone: 0:16}" = "secure-delegated" ]
	then
		$PDNSUTIL --config-dir=. $configname import-zone-key $zone $zone.private ksk 2>&1
		$PDNSUTIL --config-dir=. $configname add-zone-key $zone rsasha256 1024 zsk active 2>&1
		$PDNSUTIL --config-dir=. $configname rectify-zone $zone 2>&1
		$PDNSUTIL --config-dir=. $configname set-publish-cds $zone 2>&1
		$PDNSUTIL --config-dir=. $configname set-publish-cdnskey $zone 2>&1
	else
		# check if PKCS#11 should be used
		if [ "$pkcs11" -eq 1 ]; then
			if [ "$slot" == "" ]; then
				slot=0
			else
				slot=$((slot+1))
			fi
			label=pdnstest-${EPOCHSECONDS}-${slot}
			softhsm2-util --delete-token --label $label 2> /dev/null || true
			softhsm2-util --init-token --label $label --free --pin 1234 --so-pin 1234
			kid=`$PDNSUTIL --config-dir=. $configname hsm assign $zone ecdsa256 ksk softhsm2 $label 1234 $label 2>&1 | grep softhsm | awk '{ print $NF }'`
			$PDNSUTIL --config-dir=. $configname hsm create-key $zone $kid
			$PDNSUTIL --config-dir=. $configname rectify-zone $zone 2>&1
		else
			$PDNSUTIL --config-dir=. $configname secure-zone $zone 2>&1
		fi
		if [ "${zone: 0:20}" = "cdnskey-cds-test.com" ]; then
			$PDNSUTIL --config-dir=. $configname set-publish-cds $zone 2>&1
			$PDNSUTIL --config-dir=. $configname set-publish-cdnskey $zone 2>&1
		fi
		if [ "$zone" = "dnssec-parent.com" ]; then
			$PDNSUTIL --config-dir=. $configname set-publish-cds $zone 0 2>&1
			$PDNSUTIL --config-dir=. $configname set-publish-cdnskey $zone delete 2>&1
		fi
	fi
}

kill_process ()
{
	set +e
	trap - EXIT INT TERM

	if [ $1 -gt 1 ]
	then
		echo "exitvalue$1" >> failed_tests
		../regression-tests/toxml
		../regression-tests/totar
	fi

	pids=$(cat pdns*.pid)

	if [ -n "$pids" ]
	then
		kill $pids
		# make sure they die.
		loopcount=0
		done=0
		while [ $loopcount -lt 10 ] && [ $done -eq 0 ]
		do
			done=1
			for pid in $pids
			do
				kill -0 $pid > /dev/null 2>&1
				if [ $? -eq 0 ];
				then
					done=0
				fi
			done
			let loopcount=loopcount+1
			sleep 1
		done

		kill -9 $pids
	fi

	rm pdns*.pid
	exit $1
}

if [ ! -x $PDNS ]
 then
	echo "$PDNS is not executable binary"
	exit
fi

if [ ! -x $PDNS2 ]
then
	echo "$PDNS2 is not executable binary"
	exit
fi

address="${PDNS_LISTEN_ADDR:-127.0.0.1}"
port=$1
[ -z "$port" ] && port=5300
context=$2
[ -z "$context" ] && context=bind-dnssec
wait=$3
[ -z "$wait" ] && wait=nowait
cachettl=$4
[ -z "$cachettl" ] && cachettl=0

testsdir=./tests

rm -f pdns*.pid
rm -f *_tests
rm -f pdns-*.conf

presigned=no
both=no

presigned=yes
port=$((port-100))
presignedcontext=$context

optout=0
pkcs11=0

if [ "${context: -13}" = "-nsec3-optout" ]
then
	optout=1
fi

if [ "${context: -7}" = "-pkcs11" ]
then
        pkcs11=1
        context=${context:0:-7}
fi

lua_prequery="--query-cache-ttl=0 --receiver-threads=1 --distributor-threads=1 --direct-dnskey=yes --cache-ttl=0"

source ../regression-tests/backends/common

start_master

check_process

dotests () {
	nameserver=127.0.0.1 ../regression-tests/runtests

	cat ../regression-tests/trustedkeys
}

## TODO: give sdig a timeout

RETVAL=0

export address
export port
export context
export extracontexts
export skipreasons
export backend
export testsdir
export optout

sleep 2

start_slave

export port
export context
export skipreasons
export backend

dotests RETVAL

if [ "$wait" = "wait" ]
then
	echo tests done! push enter to terminate instance
	read l
fi

trap "kill_process $RETVAL" EXIT
