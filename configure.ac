AC_PREREQ([2.61])

dnl The following lines may be patched by set-version-auth.
AC_INIT([pdns], [git])
dnl AC_SUBST([DIST_HOST], [TO_BE_PATCHED])
dnl End patch area.

AC_CONFIG_SRCDIR([pdns/receiver.cc])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_AUX_DIR([build-aux])

AM_INIT_AUTOMAKE([foreign dist-bzip2 no-dist-gzip tar-ustar -Wno-portability subdir-objects 1.11])
AM_SILENT_RULES([yes])

AC_CANONICAL_HOST
: ${CXXFLAGS="-Wall -g -O2"}

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_YACC
AM_PROG_LEX
AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_PROG_CXX
AS_IF([test "x$CXX" = "xno" || test "x$CXX:x$GXX" = "xg++:x"],
  AC_MSG_ERROR([no C++ compiler found])
)

AC_LANG([C++])

AC_CC_PIE
AC_CC_STACK_PROTECTOR
AC_CC_PARAM_SSP_BUFFER_SIZE([4])
AC_CC_D_FORTIFY_SOURCE

AC_CHECK_FUNC([socket], [], [
 AC_CHECK_LIB([socket], [socket], [LIBS="-lsocket $LIBS"])
])

AC_CHECK_FUNC([gethostent], [], [
 AC_CHECK_LIB([nsl], [gethostent], [LIBS="-lnsl $LIBS"])
])

m4_ifndef([LT_INIT],[
AC_PROG_LIBTOOL([disable-static])
],[
LT_INIT([disable-static])
])

AC_LD_RELRO

MC_TM_GMTOFF

AM_CONDITIONAL([RELEASE_BUILD], [test "$PACKAGE_VERSION" != "git"])

# Define full_libdir to be the fully expanded (${exec_prefix}, etc.)
# "system" library path.
# We use this to search for other libraries.
eval full_libdir="\"$libdir\""

# detect pkg-config explicitly
PKG_PROG_PKG_CONFIG

AC_CHECK_HEADERS(
	[sys/mman.h],
	[AC_CHECK_FUNC(
		[mmap],
		[AC_DEFINE(HAVE_MMAP, [1], [Define to 1 if you have mmap])],
		[have_mmap=no]
	)],
	[have_mmap=no]
)

PDNS_CHECK_RAGEL
AC_CHECK_PROG([ASCIIDOC], [asciidoc], [asciidoc])

PDNS_WITH_LUA

BOOST_REQUIRE([1.35])
BOOST_FOREACH
BOOST_PROGRAM_OPTIONS([mt])
BOOST_SERIALIZATION([mt])

PDNS_ENABLE_UNIT_TESTS

dnl Allow user to require SQLite3
AC_MSG_CHECKING([whether user requires sqlite3])
AC_ARG_WITH([sqlite3],
  [AS_HELP_STRING([--with-sqlite3],[include sqlite3 driver @<:@default=no@:>@])],
  [WITH_SQLITE3=$withval],
  [WITH_SQLITE3=no]
)
AC_MSG_RESULT([$WITH_SQLITE3])
SQLITE3PC=sqlite3
if test "$WITH_SQLITE3" != "no"; then
  needsqlite3=yes
  if test "$WITH_SQLITE3" != "yes"; then
    SQLITE3PC=$WITH_SQLITE3
  fi
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_CHECK_FUNCS([strcasestr])

# Check for libdl
my_save_LIBS="$LIBS"
LIBS=""
AC_CHECK_LIB(dl,dlopen)
LIBDL=$LIBS
LIBS="$my_save_LIBS"
AC_SUBST(LIBDL)

AC_MSG_CHECKING([for RTLD_NOW]);
ac_save_LIBS="$LIBS"
LIBS="$LIBS $LIBDL"
AC_LINK_IFELSE(
  [AC_LANG_PROGRAM([[#include <dlfcn.h>]],
    [[(void) dlopen("",RTLD_NOW);]])],
  [has_RTLD_NOW=yes],
  [has_RTLD_NOW=no])
AC_MSG_RESULT([$has_RTLD_NOW])
if test "$has_RTLD_NOW" = "no"; then
  AC_DEFINE(NEED_RTLD_NOW,,[If host OS misses RTLD_NOW])
fi
LIBS=$ac_save_LIBS

# Check for libcrypt

my_save_LIBS="$LIBS"
LIBS=""
AC_CHECK_LIB(crypt, crypt)
LIBCRYPT=$LIBS
LIBS="$my_save_LIBS"
AC_SUBST(LIBCRYPT)

DYNLINKFLAGS=""
THREADFLAGS=""

AM_CONDITIONAL([OS_MACOSX], false)
case "$host_os" in
solaris2.10)
  LIBS="-lposix4 -lresolv -lnsl -lsocket -lpthread -lrt $LIBS"
  CXXFLAGS="-D_REENTRANT $CXXFLAGS"
  ;;
solaris2.8 | solaris2.9 )
  AC_DEFINE(NEED_POSIX_TYPEDEF,,[If POSIX typedefs need to be defined])
  AC_DEFINE(NEED_INET_NTOP_PROTO,,[If your OS is so broken that it needs an additional prototype])
  LIBS="-lposix4 -lresolv -lnsl -lsocket -lpthread $LIBS"
  CXXFLAGS="-D_REENTRANT $CXXFLAGS"
  ;;
linux*)
  DYNLINKFLAGS="-rdynamic"
  THREADFLAGS="-pthread"
  CXXFLAGS="-D_GNU_SOURCE $CXXFLAGS"
  ;;
darwin*)
  DYNLINKFLAGS="-rdynamic"
  CXXFLAGS="-D__APPLE_USE_RFC_3542 $CXXFLAGS"
  AM_CONDITIONAL([OS_MACOSX], true)
  ;;
*)
  DYNLINKFLAGS="-rdynamic"
  LDFLAGS="-pthread $LDFLAGS"
  CXXFLAGS="-pthread $CXXFLAGS"
  ;;
esac

AC_SUBST(THREADFLAGS)
AC_SUBST(DYNLINKFLAGS)

PDNS_ENABLE_VERBOSE_LOGGING
PDNS_WITH_SYSTEM_POLARSSL
PDNS_ENABLE_BOTAN
PDNS_ENABLE_PKCS11
PDNS_WITH_CRYPTOPP
PDNS_ENABLE_REMOTEBACKEND_ZEROMQ

AC_MSG_CHECKING([whether we will be building static binaries])

AC_ARG_ENABLE([static-binaries],
  [AS_HELP_STRING([--enable-static-binaries],[build static binaries @<:@default=no@:>@])],
  [static=$enableval],
  [static=no],
)
AC_MSG_RESULT([$static])
AM_CONDITIONAL([ALLSTATIC], [test "x$static" != "xno"])
AS_IF([test "x$static" != "xno"],
  [LDFLAGS="-all-static $LDFLAGS"]
)

modules="bind gmysql geo random"
AC_ARG_WITH([modules],
  [AS_HELP_STRING([--with-modules],[which backends to compile with @<:@default=bind gmysql geo random@:>@])],
  [modules="$withval"]
)

dynmodules="pipe"
AC_ARG_WITH([dynmodules],
  [AS_HELP_STRING([--with-dynmodules],[which backends to build for dynamic loading @<:@default=pipe@:>@])],
  [dynmodules="$withval"]
)

AC_SUBST(socketdir)
socketdir="/var/run"
AC_ARG_WITH([socketdir],
  [AS_HELP_STRING([--with-socketdir],[where the controlsocket lives @<:@default=/var/run@:>@])],
  [socketdir="$withval"]
)

AC_SUBST(moduledirs)
AC_SUBST(moduleobjects)
AC_SUBST(modulelibs)
AC_DEFINE_UNQUOTED([PDNS_MODULES],"$modules", [Built-in modules])

AC_MSG_CHECKING([whether we will be building the server])
AC_ARG_ENABLE([pdns-server],
  [AS_HELP_STRING([--enable-pdns_server],[if we should build the server @<:@default=yes@:>@])],
  [enable_pdns_server=$enableval],
  [enable_pdns_server=yes]
)
AC_MSG_RESULT([$enable_pdns_server])
AM_CONDITIONAL([WITH_PDNS_SERVER],[test "x$enable_pdns_server" != "xno"])

AC_ARG_ENABLE([gcc-skip-locking],
  [AS_HELP_STRING([--enable-gcc-skip-locking],[if we should forcefully skip gcc locking @<:@default=no@:>@])],
  [AC_DEFINE(GCC_SKIP_LOCKING,[],[Skip gcc locking])],
)

AC_MSG_CHECKING([whether we will be building and installing the extra tools])
AC_ARG_ENABLE([tools],
  [AS_HELP_STRING([--enable-tools],[if we should build and install the tools @<:@default=no@:>@])],
  [enable_tools=$enableval],
  [enable_tools=no]
)

AC_MSG_RESULT([$enable_tools])
AM_CONDITIONAL([TOOLS],[test "x$enable_tools" != "xno"])

for a in $modules $dynmodules; do
  case "$a" in
    oracle|goracle)
      PDNS_WITH_ORACLE
      needoracle=yes
      ;;
    lmdb)
      PDNS_WITH_LMDB
      needlmdb=yes
      ;;
    mydns|gmysql|pdns)
      PDNS_WITH_MYSQL
      ;;
    gpgsql)
      PDNS_WITH_POSTGRESQL
      ;;
    gsqlite3)
      needsqlite3=yes
      ;;
    ldap)
      PDNS_CHECK_LDAP
      ;;
    opendbx)
      PDNS_CHECK_OPENDBX
      ;;
    tinydns)
      PDNS_CHECK_CDB
      ;;
    geoip)
      PDNS_CHECK_GEOIP
      ;;
    lua)
      AS_IF([test "x$with_lua" = "xno"],
        AC_MSG_ERROR([Lua backend needs lua, run ./configure --with-lua])
      )
      AS_IF([test "x$LUAPC" = "x"],
        AC_MSG_ERROR([Lua backend needs lua but we cannot find it])
      )
      ;;
  esac
done

AM_CONDITIONAL([ORACLE],[test "x$needoracle" = "xyes"])

AM_CONDITIONAL([LMDB],[test "x$needlmdb" = "xyes"])

AM_CONDITIONAL([SQLITE3], [test "x$needsqlite3" = "xyes"])
if test "$needsqlite3"; then
  PKG_CHECK_MODULES([SQLITE3], $SQLITE3PC,
    [HAVE_SQLITE3=yes],
    [AC_MSG_ERROR([Could not find sqlite3])]
  )
  AC_SUBST(SQLITE3_LIBS)
  AC_SUBST(SQLITE3_CFLAGS)
  AC_DEFINE([HAVE_SQLITE3],[1],[If we have sqlite3])
fi

AC_CHECK_FUNCS([localtime_r])

for a in $modules; do
  moduledirs="$moduledirs ${a}backend"

  for b in `cat $srcdir/modules/${a}backend/OBJECTFILES`; do
    moduleobjects="$moduleobjects ../modules/${a}backend/$b"
  done
  modulelibs="$modulelibs `cat $srcdir/modules/${a}backend/OBJECTLIBS`"

  if test ${a} = "gpgsql"; then
    LIBS="$LIBS $LIBCRYPT"

    case "$host_os" in
      freebsd*)
        ;;
      darwin*)
        modulelibs="$modulelibs -lresolv"
        ;;
      *)
        modulelibs="$modulelibs -lresolv -lnsl"
        ;;
    esac
  fi
done

for a in $dynmodules; do
  moduledirs="$moduledirs ${a}backend"
done

CFLAGS="$PIE_CFLAGS $CFLAGS"
CXXFLAGS="$PIE_CFLAGS $CXXFLAGS"
LDFLAGS="$RELRO_LDFLAGS $LDFLAGS"

AC_SUBST(LIBS)

AC_SUBST([AM_CPPFLAGS],
  ["AS_ESCAPE([-I$(top_builddir) -I$(top_srcdir)]) $THREADFLAGS $BOOST_CPPFLAGS"]
)

AC_SUBST([YAHTTP_CFLAGS], ['-I$(top_srcdir)/pdns/ext/yahttp'])
AC_SUBST([YAHTTP_LIBS], ['-L$(top_builddir)/pdns/ext/yahttp/yahttp -lyahttp'])

export moduledirs moduleobjects modulelibs

AC_CONFIG_FILES([
  Makefile
  modules/Makefile
  pdns/Makefile
  codedocs/Makefile
  pdns/pdns.init
  pdns/ext/Makefile
  pdns/ext/yahttp/Makefile
  pdns/ext/yahttp/yahttp/Makefile
  pdns/ext/polarssl/Makefile
  pdns/ext/polarssl/library/Makefile
  pdns/ext/rapidjson/Makefile
  modules/bindbackend/Makefile
  modules/db2backend/Makefile
  modules/geobackend/Makefile
  modules/geoipbackend/Makefile
  modules/gmysqlbackend/Makefile
  modules/goraclebackend/Makefile
  modules/gpgsqlbackend/Makefile
  modules/gsqlite3backend/Makefile
  modules/ldapbackend/Makefile
  modules/luabackend/Makefile
  modules/mydnsbackend/Makefile
  modules/opendbxbackend/Makefile
  modules/oraclebackend/Makefile
  modules/pipebackend/Makefile
  modules/randombackend/Makefile
  modules/remotebackend/Makefile
  modules/tinydnsbackend/Makefile
  modules/lmdbbackend/Makefile
])
AC_OUTPUT

