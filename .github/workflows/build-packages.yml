---
name: Build packages

on:
  workflow_call:
    inputs:
      product:
        required: true
        description: Product to build
        type: string
      os:
        required: false
        description: OSes to build for, space separated
        type: string
        # please remember to update the pkghashes below when you
        # update this list, as well as the one in builder-dispatch.yml
        default: >-
          el-8
          el-9
          el-10
          debian-bullseye
          debian-bookworm
          debian-trixie
          ubuntu-focal
          ubuntu-jammy
          ubuntu-noble
      ref:
        description: git ref to checkout
        type: string
        default: master
        required: false
      is_release:
        description: is this a release build?
        type: string
        required: false
        default: 'NO'
    secrets:
      DOWNLOADS_AUTOBUILT_SECRET:
        required: true
      DOWNLOADS_AUTOBUILT_RSYNCTARGET:
        required: true
      DOWNLOADS_AUTOBUILT_HOSTKEY:
        required: true
      PULP_FILE_REPO_NAME:
        required: true
      PULP_URL:
        required: true
      PULP_CONTENT_URL:
        required: true
      PULP_CI_USERNAME:
        required: true
      PULP_CI_PASSWORD:
        required: true
      PULP_PDNS_GPG_PUBKEY_MASTER:
        required: true
      PULP_PDNS_GPG_PUBKEY:
        required: true

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

env:
  INV_CMD: ". ${GITHUB_WORKSPACE}/.venv/bin/activate && inv"

jobs:
  prepare:
    name: generate OS runner and arch list
    runs-on: ubuntu-24.04
    outputs:
      oslist: ${{ steps.get-oslist.outputs.oslist }}
      runnerlist: ${{ steps.get-runnerlist.outputs.runnerlist }}
      archlist: ${{ steps.get-archlist.outputs.archlist }}
      publish-packages: ${{ steps.set-publish-packages.outputs.publish-packages }}
    env:
      OS: ${{ inputs.os }}
      REF: ${{ inputs.ref }}
      IS_RELEASE: ${{ inputs.is_release }}
    steps:
      # instead of jo, we could use jq here, which avoids running apt, and thus would be faster.
      # but, as this whole workflow needs at least 30 minutes to run, I prefer spending a few seconds here
      # so that the command remains readable, because jo is simpler to use.
      - run: sudo apt-get update && sudo apt-get -y install jo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
          ref: ${{ inputs.ref }}
          persist-credentials: false
      - id: get-oslist
        run: |
          available_targets=$(ls builder-support/dockerfiles/Dockerfile.target.* )
          for i in $(echo "${OS}"); do
            if echo $available_targets | grep -qq $i; then
              targets+=($i)
            else
              if [[ "${REF}" == "master" ]]; then
                echo "::error title=Dockerfile not found for ${i}::OS ${i} not available as target in ${REF}" && exit 1
              else
                echo "::warning title=Packages will not be generated for ${i}::OS ${i} not available as target in ${REF}"
              fi
            fi
          done
          echo "oslist=$(jo -a ${targets[*]})" >> "$GITHUB_OUTPUT"
      - id: get-runnerlist
        run: echo "runnerlist=$(jo -a ubuntu-24.04 ${{ vars.ARM64_USE_UBICLOUD == '1' && 'ubicloud-standard-2-arm' || '' }})" >> "$GITHUB_OUTPUT"
      - id: get-archlist
        run: echo "archlist=$(jo -a  x86_64 ${{ vars.ARM64_USE_UBICLOUD == '1' && 'aarch64' || '' }})" >> "$GITHUB_OUTPUT"
        # Only upload RPM and DEB packages for master and tags. Build outputs and provenance of all refs
      - id: set-publish-packages
        run: echo "publish-packages=$([[ "${REF}" == "master" || "${IS_RELEASE}" == "YES" ]] && echo 'yes' || echo 'no')" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare
    name: for ${{ matrix.os }} ${{ inputs.product }} (${{ inputs.ref }}) on ${{ matrix.runner-os }}
    runs-on: ${{ matrix.runner-os }}
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        runner-os: ${{ fromJson(needs.prepare.outputs.runnerlist )}}
      fail-fast: false
    outputs:
      product-name: ${{ steps.normalize-name.outputs.normalized-package-name }}
      version: ${{ steps.getversion.outputs.version }}
      pkghashes-el-8-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-8-x86_64 }}
      pkghashes-el-8-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-8-aarch64 }}
      pkghashes-el-9-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-9-x86_64 }}
      pkghashes-el-9-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-9-aarch64 }}
      pkghashes-el-10-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-10-x86_64 }}
      pkghashes-el-10-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-10-aarch64 }}
      pkghashes-debian-bullseye-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-bullseye-x86_64 }}
      pkghashes-debian-bullseye-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-bullseye-aarch64 }}
      pkghashes-debian-bookworm-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-bookworm-x86_64 }}
      pkghashes-debian-bookworm-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-bookworm-aarch64 }}
      pkghashes-debian-trixie-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-trixie-x86_64 }}
      pkghashes-debian-trixie-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-trixie-aarch64 }}
      pkghashes-ubuntu-focal-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-focal-x86_64 }}
      pkghashes-ubuntu-focal-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-focal-aarch64 }}
      pkghashes-ubuntu-jammy-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-jammy-x86_64 }}
      pkghashes-ubuntu-jammy-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-jammy-aarch64 }}
      pkghashes-ubuntu-noble-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-noble-x86_64 }}
      pkghashes-ubuntu-noble-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-noble-aarch64 }}
      srchashes: ${{ steps.srchashes.outputs.srchashes }}
    env:
      IS_RELEASE: ${{ inputs.is_release}}
      PRODUCT: ${{ inputs.product }}
      OS: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for correct version numbers
          submodules: recursive
          ref: ${{ inputs.ref }}
          persist-credentials: false
      # this builds packages and runs our unit tests (make check)
      - run: IS_RELEASE=${IS_RELEASE} builder/build.sh -v -m ${PRODUCT} ${OS}
      - name: Get version number
        run: |
          echo "version=$(readlink builder/tmp/latest)" >> $GITHUB_OUTPUT
        id: getversion
      - name: Get target architecture
        run: |
          echo "target-arch=$(uname -m)" >> $GITHUB_OUTPUT
        id: getarch
      - name: Normalize package name
        id: normalize-name
        run: |
          if [ "x${PRODUCT}" = "xauthoritative" ]; then
            echo "normalized-package-name=pdns" >> $GITHUB_OUTPUT
          elif [ "x${PRODUCT}" = "xrecursor" ]; then
            echo "normalized-package-name=pdns-recursor" >> $GITHUB_OUTPUT
          else
            echo "normalized-package-name=${PRODUCT}" >> $GITHUB_OUTPUT
          fi
      - name: Include architecture in the packages compressed file name
        env:
          TARGET_ARCH: ${{ steps.getarch.outputs.target-arch }}
        run: for f in $(ls ./built_pkgs/*/*/*-${OS}.tar.bz2 | sed 's/\.tar.bz2$//'); do mv $f.tar.bz2 $f-${TARGET_ARCH}.tar.bz2; done
      - name: Upload packages as GH artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.product }}-${{ matrix.os }}-${{ steps.getversion.outputs.version }}-${{ steps.getarch.outputs.target-arch }}
          path: built_pkgs/
          retention-days: 7
      - name: Extract packages from the tarball
        # so we get provenance for individual packages (and the JSON package manifests from the builder)
        id: extract
        env:
          TARGET_ARCH: ${{ steps.getarch.outputs.target-arch }}
          PACKAGE_NAME: ${{ steps.normalize-name.outputs.normalized-package-name }}
          VERSION: ${{ steps.getversion.outputs.version }}
        run: |
          mkdir -m 700 -p ./packages/
          tar xvf ./built_pkgs/*/*/${PACKAGE_NAME}-${VERSION}-${OS}-${TARGET_ARCH}.tar.bz2 -C ./packages/ --transform='s/.*\///'
      - name: Generate package hashes for provenance
        shell: bash
        id: pkghashes
        env:
          TARGET_ARCH: ${{ steps.getarch.outputs.target-arch }}
        run: |
          echo "pkghashes-${OS}-${TARGET_ARCH}=$(shopt -s nullglob; sha256sum ./packages/*.rpm ./packages/*.deb ./packages/*.json | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Generate source hash for provenance
        shell: bash
        id: srchashes
        env:
          PACKAGE_NAME: ${{ steps.normalize-name.outputs.normalized-package-name }}
          VERSION: ${{ steps.getversion.outputs.version }}
        run: |
          echo "srchashes=$(sha256sum ./built_pkgs/*/*/${PACKAGE_NAME}-${VERSION}.tar.* | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Upload packages to downloads.powerdns.com
        env:
          SSHKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_SECRET }}
          RSYNCTARGET: ${{ secrets.DOWNLOADS_AUTOBUILT_RSYNCTARGET }}
          HOSTKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_HOSTKEY }}
        if:
          "${{ env.SSHKEY != '' }}"
        run: |
          mkdir -m 700 -p ~/.ssh
          echo "$SSHKEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$HOSTKEY" > ~/.ssh/known_hosts
          rsync -4rlptD built_pkgs/* "$RSYNCTARGET"

  check-hashes:
    needs: [prepare, build]
    name: Check if hashes were created for all requested targets
    runs-on: ubuntu-24.04
    env:
      OUTPUTS: ${{ toJSON(needs.build.outputs) }}
      OSLIST: ${{ needs.prepare.outputs.oslist }}
    steps:
      - name: Get list of outputs from build jobs
        run: echo "${OUTPUTS}" | jq 'keys[]' | grep -vE 'version|product-name' | tee /tmp/build-outputs.txt
      - name: Get list of OS inputs
        run: |
          for os in $(echo "${OSLIST}" | jq -r '.[]'); do
            for architecture in x86_64 ${{ vars.ARM64_USE_UBICLOUD == '1' && 'aarch64' || '' }}; do
              echo "\"pkghashes-$os-$architecture\"" | tee -a /tmp/os-inputs.txt
            done
          done
          sort -o /tmp/os-inputs.txt /tmp/os-inputs.txt
          echo "\"srchashes\"" | tee -a /tmp/os-inputs.txt
      - name: Fail if there is a hash missing
        run: if ! diff -q /tmp/build-outputs.txt /tmp/os-inputs.txt; then exit 1; fi

  provenance-pkgs:
    needs: [prepare, build]
    name: Generate provenance for ${{ inputs.product }} (${{ inputs.ref }}) for ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        architecture: ${{ fromJson(needs.prepare.outputs.archlist )}}
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To be able to upload assets as release artifacts
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs[format('pkghashes-{0}-{1}', matrix.os, matrix.architecture)] }}"
      upload-assets: false
      provenance-name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-${{ matrix.os }}-${{ matrix.architecture }}.intoto.jsonl"
      private-repository: true

  provenance-src:
    needs: build
    name: Generate provenance for ${{ inputs.product }} (${{ inputs.ref }}) source tarball
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To be able to upload assets as release artifacts
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.srchashes }}"
      upload-assets: false
      provenance-name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-src.intoto.jsonl"
      private-repository: true

  upload-provenance:
    needs: [prepare, build, provenance-src, provenance-pkgs]
    name: Upload the provenance artifacts to downloads.powerdns.com
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        architecture: ${{ fromJson(needs.prepare.outputs.archlist )}}
    steps:
      - name: Download source tarball provenance for ${{ inputs.product }} (${{ inputs.ref }})
        id: download-src-provenance
        uses: actions/download-artifact@v4 # be careful, this needs to match what https://github.com/slsa-framework/slsa-github-generator is using
        with:
          name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-src.intoto.jsonl"
      - name: Download provenance for ${{ inputs.product }} (${{ inputs.ref }}) for ${{ matrix.os }}
        id: download-provenance
        uses: actions/download-artifact@v4 # be careful, this needs to match what https://github.com/slsa-framework/slsa-github-generator is using
        with:
          name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-${{ matrix.os }}-${{ matrix.architecture }}.intoto.jsonl"
      - name: Upload provenance artifacts to downloads.powerdns.com
        id: upload-provenance
        env:
          SSHKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_SECRET }}
          RSYNCTARGET: ${{ secrets.DOWNLOADS_AUTOBUILT_RSYNCTARGET }}
          HOSTKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_HOSTKEY }}
          PRODUCT: ${{ needs.build.outputs.product-name }}
          VERSION: ${{ needs.build.outputs.version }}
          DOWNLOAD_PATH: ${{ steps.download-provenance.outputs.download-path }}
        if:
          "${{ env.SSHKEY != '' }}"
        shell: bash
        run: |
          mkdir -m 700 -p ~/.ssh
          echo "$SSHKEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$HOSTKEY" > ~/.ssh/known_hosts
          mkdir -m 755 -p "slsa/${PRODUCT}/${VERSION}/"
          mv "${DOWNLOAD_PATH}"/*.jsonl "slsa/${PRODUCT}/${VERSION}"
          rsync -4rlptD slsa/* "$RSYNCTARGET"

  upload-packages:
    needs: [prepare, build, provenance-src, provenance-pkgs]
    continue-on-error: true
    if: ${{ needs.prepare.outputs.publish-packages == 'yes' }}
    name: Upload packages
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        architecture: ${{ fromJson(needs.prepare.outputs.archlist )}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: install pyinvoke and pulp
        run: |
          python3 -m venv ${GITHUB_WORKSPACE}/.venv
          . ${GITHUB_WORKSPACE}/.venv/bin/activate && pip install -r ${GITHUB_WORKSPACE}/builder-support/requirements.txt
      - run: ${{ env.INV_CMD }} validate-pulp-credentials
        env:
          PULP_REPO_NAME: ${{ secrets.PULP_FILE_REPO_NAME }}
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          pattern: "${{ inputs.product }}-${{ matrix.os }}-${{ needs.build.outputs.version }}-${{ matrix.architecture }}"
      - name: Normalize package name
        id: normalize-name
        run: |
          shortversion=$(echo ${{ needs.build.outputs.version }} | grep -qq master && echo master || echo ${{ needs.build.outputs.version }} | awk -F. '{print $1$2}')
          if [ "x${{ inputs.product }}" = "xauthoritative" ]; then
            echo "normalized-package-name=pdns" >> $GITHUB_OUTPUT
            echo "normalized-product-name=auth-${shortversion}" >> $GITHUB_OUTPUT
          elif [ "x${{ inputs.product }}" = "xrecursor" ]; then
            echo "normalized-package-name=pdns-recursor" >> $GITHUB_OUTPUT
            echo "normalized-product-name=rec-${shortversion}" >> $GITHUB_OUTPUT
          else
            echo "normalized-package-name=${{ inputs.product }}" >> $GITHUB_OUTPUT
            echo "normalized-product-name=${{ inputs.product }}-${shortversion}" >> $GITHUB_OUTPUT
          fi
      - name: Extract and prepare files and packages
        run: |
          # Prepare files folder
          mkdir -p files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}
          # Copy compressed and provenance files
          cp ${{ inputs.product }}-${{ matrix.os }}-*-${{ matrix.architecture }}/*/*/*-${{ matrix.architecture }}.tar.bz2 files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}/
          # Extract packages
          for i in $(ls ./${{ inputs.product }}-${{ matrix.os }}-*-${{ matrix.architecture }}/*/*/*${{ matrix.architecture }}.tar.bz2); do mkdir -p ./packages/$(echo $i | cut -d '/' -f 2)/; tar -xvf $i -C ./packages/$(echo $i | cut -d '/' -f 2)/ --transform='s/.*\///'; done
          # Move RPM files
          for i in $(ls ./packages/*/*.rpm); do f=$(echo $i | awk -F/ '{print $3}' | awk -F'${{ inputs.product }}-' '{print $2}' | awk -F'-${{ needs.build.outputs.version }}-' '{print $1"."$2}'); mkdir -p rpm_packages/${f}; mv $i rpm_packages/${f}/; done
          # Move deb files
          for i in $(ls ./packages/*/*.deb); do mkdir -p deb_packages/$(echo $i | awk -F/ '{print $3}' | awk -F- '{print $2"-"$3}'); mv $i deb_packages/$(echo $i | awk -F/ '{print $3}' | awk -F- '{print $2"-"$3}'); done
      - name: Upload DEB Packages
        if: ${{ contains(matrix.os, 'ubuntu-') || ( contains(matrix.os, 'debian-')) }}
        run: ${{ env.INV_CMD }} pulp-upload-deb-packages-by-folder deb_packages ${{ steps.normalize-name.outputs.normalized-product-name }}
        env:
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}
      - name: Upload RPM Packages
        if: ${{ contains(matrix.os, 'el-') || ( contains(matrix.os, 'centos-')) }}
        run: ${{ env.INV_CMD }} pulp-upload-rpm-packages-by-folder rpm_packages ${{ steps.normalize-name.outputs.normalized-product-name }}
        env:
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}

  upload-src-files:
    needs: [prepare, build, provenance-src, provenance-pkgs]
    continue-on-error: true
    if: ${{ needs.prepare.outputs.publish-packages == 'yes' }}
    name: Upload source and other files
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        architecture: ${{ fromJson(needs.prepare.outputs.archlist )}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: install pyinvoke and pulp
        run: |
          python3 -m venv ${GITHUB_WORKSPACE}/.venv
          . ${GITHUB_WORKSPACE}/.venv/bin/activate && pip install -r ${GITHUB_WORKSPACE}/builder-support/requirements.txt
      - run: ${{ env.INV_CMD }} validate-pulp-credentials
        env:
          PULP_REPO_NAME: ${{ secrets.PULP_FILE_REPO_NAME }}
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          pattern: "${{ inputs.product }}-${{ matrix.os }}-${{ needs.build.outputs.version }}-${{ matrix.architecture }}"
      - name: Normalize package name
        id: normalize-name
        run: |
          if [ "x${{ inputs.product }}" = "xauthoritative" ]; then
            echo "normalized-package-name=pdns" >> $GITHUB_OUTPUT
          elif [ "x${{ inputs.product }}" = "xrecursor" ]; then
            echo "normalized-package-name=pdns-recursor" >> $GITHUB_OUTPUT
          else
            echo "normalized-package-name=${{ inputs.product }}" >> $GITHUB_OUTPUT
          fi
      - name: Extract and prepare files and packages
        run: |
          # Prepare files folder
          mkdir -p files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}
          # Copy compressed files
          cp ${{ inputs.product }}-${{ matrix.os }}-*-${{ matrix.architecture }}/*/*/*.tar.bz2 files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}/
          # Extract packages
          for i in $(ls ./${{ inputs.product }}-${{ matrix.os }}-*-${{ matrix.architecture }}/*/*/*${{ matrix.architecture }}.tar.bz2); do mkdir -p ./packages/$(echo $i | cut -d '/' -f 2)/; tar -xvf $i -C ./packages/$(echo $i | cut -d '/' -f 2)/ --transform='s/.*\///'; done
          # Add file with list of dependencies
          for i in $(ls ./packages/*/*.json); do mv $i files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}/; done
      - name: Upload build data
        run: ${{ env.INV_CMD }} pulp-upload-file-packages-by-folder files
        env:
          PULP_REPO_NAME: ${{ secrets.PULP_FILE_REPO_NAME }}
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}

  upload-provenance-files:
    needs: [build, provenance-src, provenance-pkgs]
    name: Upload provenance files
    continue-on-error: true
    if: ${{ needs.prepare.outputs.publish-packages == 'yes' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: install pyinvoke and pulp
        run: |
          python3 -m venv ${GITHUB_WORKSPACE}/.venv
          . ${GITHUB_WORKSPACE}/.venv/bin/activate && pip install -r ${GITHUB_WORKSPACE}/builder-support/requirements.txt
      - run: ${{ env.INV_CMD }} validate-pulp-credentials
        env:
          PULP_REPO_NAME: ${{ secrets.PULP_FILE_REPO_NAME }}
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}
      - name: Download provenance files
        uses: actions/download-artifact@v4
        with:
          pattern: "${{ inputs.product }}-${{ needs.build.outputs.version }}-*.intoto.jsonl"
      - name: Normalize package name
        id: normalize-name
        run: |
          if [ "x${{ inputs.product }}" = "xauthoritative" ]; then
            echo "normalized-package-name=pdns" >> $GITHUB_OUTPUT
          elif [ "x${{ inputs.product }}" = "xrecursor" ]; then
            echo "normalized-package-name=pdns-recursor" >> $GITHUB_OUTPUT
          else
            echo "normalized-package-name=${{ inputs.product }}" >> $GITHUB_OUTPUT
          fi
      - name: Extract and prepare files and packages
        run: |
          # Prepare files folder
          mkdir -p files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}
          # Copy provenance files
          cp *.jsonl/*.jsonl files/${{ steps.normalize-name.outputs.normalized-package-name }}/${{ needs.build.outputs.version }}/
      - name: Upload provenance data
        run: ${{ env.INV_CMD }} pulp-upload-file-packages-by-folder files
        env:
          PULP_REPO_NAME: ${{ secrets.PULP_FILE_REPO_NAME }}
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}

  publish-packages:
    needs: [prepare, build, upload-packages]
    continue-on-error: true
    name: Publish RPM and DEB packages
    runs-on: ubuntu-24.04
    outputs:
      check-finished: ${{ steps.check-finished.outputs.upload-completed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: install pyinvoke and pulp
        run: |
          python3 -m venv ${GITHUB_WORKSPACE}/.venv
          . ${GITHUB_WORKSPACE}/.venv/bin/activate && pip install -r ${GITHUB_WORKSPACE}/builder-support/requirements.txt
      - name: Normalize product name
        id: normalize-name
        run: |
          shortversion=$(echo ${{ needs.build.outputs.version }} | grep -qq master && echo master || echo ${{ needs.build.outputs.version }} | awk -F. '{print $1$2}')
          if [ "x${{ inputs.product }}" = "xauthoritative" ]; then
            echo "normalized-product-name=auth-${shortversion}" >> $GITHUB_OUTPUT
          elif [ "x${{ inputs.product }}" = "xrecursor" ]; then
            echo "normalized-product-name=rec-${shortversion}" >> $GITHUB_OUTPUT
          else
            echo "normalized-product-name=${{ inputs.product }}-${shortversion}" >> $GITHUB_OUTPUT
          fi
      - name: Publish DEB Packages
        run: ${{ env.INV_CMD }} pulp-create-deb-publication
        env:
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}
      - name: Publish RPM Packages
        run: ${{ env.INV_CMD }} pulp-create-rpm-publication ${{ steps.normalize-name.outputs.normalized-product-name }} '${{ needs.prepare.outputs.oslist }}' '${{ needs.prepare.outputs.archlist }}'
        env:
          PULP_URL: ${{ secrets.PULP_URL }}
          PULP_CI_USERNAME: ${{ secrets.PULP_CI_USERNAME }}
          PULP_CI_PASSWORD: ${{ secrets.PULP_CI_PASSWORD }}
      - id: check-finished
        run: echo "upload-completed=yes" >> $GITHUB_OUTPUT

  test-packages:
    needs: [prepare, build, publish-packages]
    continue-on-error: true
    name: Test packages
    runs-on: ${{ matrix.runner-os }}
    if: ${{ needs.publish-packages.outputs.check-finished == 'yes' }}
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        runner-os: ${{ fromJson(needs.prepare.outputs.runnerlist )}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: install pyinvoke and pulp
        run: |
          python3 -m venv ${GITHUB_WORKSPACE}/.venv
          . ${GITHUB_WORKSPACE}/.venv/bin/activate && pip install -r ${GITHUB_WORKSPACE}/builder-support/requirements.txt
      - name: Normalize product name
        id: normalize-name
        run: |
          shortversion=$(echo ${{ needs.build.outputs.version }} | grep -qq master && echo master || echo ${{ needs.build.outputs.version }} | awk -F. '{print $1$2}')
          if [ "x${{ inputs.product }}" = "xauthoritative" ]; then
            echo "normalized-package-name=pdns" >> $GITHUB_OUTPUT
            echo "normalized-product-name=auth-${shortversion}" >> $GITHUB_OUTPUT
            echo "process-name=pdns_server" >> $GITHUB_OUTPUT
          elif [ "x${{ inputs.product }}" = "xrecursor" ]; then
            echo "normalized-package-name=pdns-recursor" >> $GITHUB_OUTPUT
            echo "normalized-product-name=rec-${shortversion}" >> $GITHUB_OUTPUT
            echo "process-name=pdns_recursor" >> $GITHUB_OUTPUT
          else
            echo "normalized-package-name=${{ inputs.product }}" >> $GITHUB_OUTPUT
            echo "normalized-product-name=${{ inputs.product }}-${shortversion}" >> $GITHUB_OUTPUT
            echo "process-name=dnsdist" >> $GITHUB_OUTPUT
          fi
      - id: get-gpg-pubkey-url
        run: |
          echo "gpg-pubkey-url=$(echo ${{ needs.build.outputs.version }} | grep -qq "master" && echo ${{ secrets.PULP_PDNS_GPG_PUBKEY_MASTER }} || echo ${{ secrets.PULP_PDNS_GPG_PUBKEY }} )" >> $GITHUB_OUTPUT
      - run: ${{ env.INV_CMD }} test-install-package ${{ steps.normalize-name.outputs.normalized-product-name }} ${{ matrix.os }} ${{ secrets.PULP_CONTENT_URL }} ${{ steps.get-gpg-pubkey-url.outputs.gpg-pubkey-url }} ${{ steps.normalize-name.outputs.normalized-package-name }} ${{ needs.build.outputs.version }}
      - name: check package version
        run: docker run -t test-build-${{ steps.normalize-name.outputs.normalized-product-name }}-${{ matrix.os }}:latest ${{ steps.normalize-name.outputs.process-name }} --version | grep -qq ${{ needs.build.outputs.version }} && echo "[OK]" || exit 1
