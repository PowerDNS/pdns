---
name: Build packages

on:
  workflow_call:
    inputs:
      product:
        required: true
        description: Product to build
        type: string
      os:
        required: false
        description: OSes to build for, space separated
        type: string
        # please remember to update the pkghashes below when you
        # update this list, as well as the one in builder-dispatch.yml
        default: >-
          el-8
          el-9
          el-10
          debian-bullseye
          debian-bookworm
          debian-trixie
          ubuntu-focal
          ubuntu-jammy
          ubuntu-noble
      ref:
        description: git ref to checkout
        type: string
        default: master
        required: false
      is_release:
        description: is this a release build?
        type: string
        required: false
        default: 'NO'
    secrets:
      DOWNLOADS_AUTOBUILT_SECRET:
        required: true
      DOWNLOADS_AUTOBUILT_RSYNCTARGET:
        required: true
      DOWNLOADS_AUTOBUILT_HOSTKEY:
        required: true

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

jobs:
  prepare:
    name: generate OS runner and arch list
    runs-on: ubuntu-24.04
    outputs:
      oslist: ${{ steps.get-oslist.outputs.oslist }}
      runnerlist: ${{ steps.get-runnerlist.outputs.runnerlist }}
      archlist: ${{ steps.get-archlist.outputs.archlist }}
    steps:
      # instead of jo, we could use jq here, which avoids running apt, and thus would be faster.
      # but, as this whole workflow needs at least 30 minutes to run, I prefer spending a few seconds here
      # so that the command remains readable, because jo is simpler to use.
      - run: sudo apt-get update && sudo apt-get -y install jo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
          ref: ${{ inputs.ref }}
          persist-credentials: false
      - id: get-oslist
        env:
          OS: ${{ inputs.os }}
          REF: ${{ inputs.ref }}
        run: |
          available_targets=$(ls builder-support/dockerfiles/Dockerfile.target.* )
          for i in $(echo "${OS}"); do
            if echo $available_targets | grep -qq $i; then
              targets+=($i)
            else
              if [[ "${REF}" == "master" ]]; then
                echo "::error title=Dockerfile not found for ${i}::OS ${i} not available as target in ${REF}" && exit 1
              else
                echo "::warning title=Packages will not be generated for ${i}::OS ${i} not available as target in ${REF}"
              fi
            fi
          done
          echo "oslist=$(jo -a ${targets[*]})" >> "$GITHUB_OUTPUT"
      - id: get-runnerlist
        run: echo "runnerlist=$(jo -a ubuntu-24.04 ${{ vars.ARM64_USE_UBICLOUD == '1' && 'ubicloud-standard-2-arm' || '' }})" >> "$GITHUB_OUTPUT"
      - id: get-archlist
        run: echo "archlist=$(jo -a  x86_64 ${{ vars.ARM64_USE_UBICLOUD == '1' && 'aarch64' || '' }})" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare
    name: for ${{ matrix.os }} ${{ inputs.product }} (${{ inputs.ref }}) on ${{ matrix.runner-os }}
    runs-on: ${{ matrix.runner-os }}
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        runner-os: ${{ fromJson(needs.prepare.outputs.runnerlist )}}
      fail-fast: false
    outputs:
      product-name: ${{ steps.normalize-name.outputs.normalized-package-name }}
      version: ${{ steps.getversion.outputs.version }}
      pkghashes-el-8-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-8-x86_64 }}
      pkghashes-el-8-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-8-aarch64 }}
      pkghashes-el-9-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-9-x86_64 }}
      pkghashes-el-9-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-9-aarch64 }}
      pkghashes-el-10-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-10-x86_64 }}
      pkghashes-el-10-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-10-aarch64 }}
      pkghashes-debian-bullseye-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-bullseye-x86_64 }}
      pkghashes-debian-bullseye-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-bullseye-aarch64 }}
      pkghashes-debian-bookworm-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-bookworm-x86_64 }}
      pkghashes-debian-bookworm-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-bookworm-aarch64 }}
      pkghashes-debian-trixie-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-trixie-x86_64 }}
      pkghashes-debian-trixie-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-trixie-aarch64 }}
      pkghashes-ubuntu-focal-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-focal-x86_64 }}
      pkghashes-ubuntu-focal-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-focal-aarch64 }}
      pkghashes-ubuntu-jammy-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-jammy-x86_64 }}
      pkghashes-ubuntu-jammy-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-jammy-aarch64 }}
      pkghashes-ubuntu-noble-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-noble-x86_64 }}
      pkghashes-ubuntu-noble-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-noble-aarch64 }}
      srchashes: ${{ steps.srchashes.outputs.srchashes }}
    env:
      IS_RELEASE: ${{ inputs.is_release}}
      PRODUCT: ${{ inputs.product }}
      OS: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for correct version numbers
          submodules: recursive
          ref: ${{ inputs.ref }}
          persist-credentials: false
      # this builds packages and runs our unit tests (make check)
      - run: IS_RELEASE=${IS_RELEASE} builder/build.sh -v -m ${PRODUCT} ${OS}
      - name: Get version number
        run: |
          echo "version=$(readlink builder/tmp/latest)" >> $GITHUB_OUTPUT
        id: getversion
      - name: Get target architecture
        run: |
          echo "target-arch=$(uname -m)" >> $GITHUB_OUTPUT
        id: getarch
      - name: Normalize package name
        id: normalize-name
        run: |
          if [ "x${PRODUCT}" = "xauthoritative" ]; then
            echo "normalized-package-name=pdns" >> $GITHUB_OUTPUT
          elif [ "x${PRODUCT}" = "xrecursor" ]; then
            echo "normalized-package-name=pdns-recursor" >> $GITHUB_OUTPUT
          else
            echo "normalized-package-name=${PRODUCT}" >> $GITHUB_OUTPUT
          fi
      - name: Include architecture in the packages compressed file name
        env:
          TARGET_ARCH: ${{ steps.getarch.outputs.target-arch }}
        run: for f in $(ls ./built_pkgs/*/*/*-${OS}.tar.bz2 | sed 's/\.tar.bz2$//'); do mv $f.tar.bz2 $f-${TARGET_ARCH}.tar.bz2; done
      - name: Upload packages as GH artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.product }}-${{ matrix.os }}-${{ steps.getversion.outputs.version }}-${{ steps.getarch.outputs.target-arch }}
          path: built_pkgs/
          retention-days: 7
      - name: Extract packages from the tarball
        # so we get provenance for individual packages (and the JSON package manifests from the builder)
        id: extract
        env:
          TARGET_ARCH: ${{ steps.getarch.outputs.target-arch }}
          PACKAGE_NAME: ${{ steps.normalize-name.outputs.normalized-package-name }}
          VERSION: ${{ steps.getversion.outputs.version }}
        run: |
          mkdir -m 700 -p ./packages/
          tar xvf ./built_pkgs/*/*/${PACKAGE_NAME}-${VERSION}-${OS}-${TARGET_ARCH}.tar.bz2 -C ./packages/ --transform='s/.*\///'
      - name: Generate package hashes for provenance
        shell: bash
        id: pkghashes
        env:
          TARGET_ARCH: ${{ steps.getarch.outputs.target-arch }}
        run: |
          echo "pkghashes-${OS}-${TARGET_ARCH}=$(shopt -s nullglob; sha256sum ./packages/*.rpm ./packages/*.deb ./packages/*.json | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Generate source hash for provenance
        shell: bash
        id: srchashes
        env:
          PACKAGE_NAME: ${{ steps.normalize-name.outputs.normalized-package-name }}
          VERSION: ${{ steps.getversion.outputs.version }}
        run: |
          echo "srchashes=$(sha256sum ./built_pkgs/*/*/${PACKAGE_NAME}-${VERSION}.tar.* | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Upload packages to downloads.powerdns.com
        env:
          SSHKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_SECRET }}
          RSYNCTARGET: ${{ secrets.DOWNLOADS_AUTOBUILT_RSYNCTARGET }}
          HOSTKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_HOSTKEY }}
        if:
          "${{ env.SSHKEY != '' }}"
        run: |
          mkdir -m 700 -p ~/.ssh
          echo "$SSHKEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$HOSTKEY" > ~/.ssh/known_hosts
          rsync -4rlptD built_pkgs/* "$RSYNCTARGET"

  check-hashes:
    needs: [prepare, build]
    name: Check if hashes were created for all requested targets
    runs-on: ubuntu-24.04
    env:
      OUTPUTS: ${{ toJSON(needs.build.outputs) }}
      OSLIST: ${{ needs.prepare.outputs.oslist }}
    steps:
      - name: Get list of outputs from build jobs
        run: echo "${OUTPUTS}" | jq 'keys[]' | grep -vE 'version|product-name' | tee /tmp/build-outputs.txt
      - name: Get list of OS inputs
        run: |
          for os in $(echo "${OSLIST}" | jq -r '.[]'); do
            for architecture in x86_64 ${{ vars.ARM64_USE_UBICLOUD == '1' && 'aarch64' || '' }}; do
              echo "\"pkghashes-$os-$architecture\"" | tee -a /tmp/os-inputs.txt
            done
          done
          sort -o /tmp/os-inputs.txt /tmp/os-inputs.txt
          echo "\"srchashes\"" | tee -a /tmp/os-inputs.txt
      - name: Fail if there is a hash missing
        run: if ! diff -q /tmp/build-outputs.txt /tmp/os-inputs.txt; then exit 1; fi

  provenance-pkgs:
    needs: [prepare, build]
    name: Generate provenance for ${{ inputs.product }} (${{ inputs.ref }}) for ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        architecture: ${{ fromJson(needs.prepare.outputs.archlist )}}
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To be able to upload assets as release artifacts
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs[format('pkghashes-{0}-{1}', matrix.os, matrix.architecture)] }}"
      upload-assets: false
      provenance-name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-${{ matrix.os }}-${{ matrix.architecture }}.intoto.jsonl"
      private-repository: true

  provenance-src:
    needs: build
    name: Generate provenance for ${{ inputs.product }} (${{ inputs.ref }}) source tarball
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To be able to upload assets as release artifacts
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.srchashes }}"
      upload-assets: false
      provenance-name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-src.intoto.jsonl"
      private-repository: true

  upload-provenance:
    needs: [prepare, build, provenance-src, provenance-pkgs]
    name: Upload the provenance artifacts to downloads.powerdns.com
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        os: ${{fromJson(needs.prepare.outputs.oslist)}}
        architecture: ${{ fromJson(needs.prepare.outputs.archlist )}}
    steps:
      - name: Download source tarball provenance for ${{ inputs.product }} (${{ inputs.ref }})
        id: download-src-provenance
        uses: actions/download-artifact@v4 # be careful, this needs to match what https://github.com/slsa-framework/slsa-github-generator is using
        with:
          name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-src.intoto.jsonl"
      - name: Download provenance for ${{ inputs.product }} (${{ inputs.ref }}) for ${{ matrix.os }}
        id: download-provenance
        uses: actions/download-artifact@v4 # be careful, this needs to match what https://github.com/slsa-framework/slsa-github-generator is using
        with:
          name: "${{ inputs.product }}-${{ needs.build.outputs.version }}-${{ matrix.os }}-${{ matrix.architecture }}.intoto.jsonl"
      - name: Upload provenance artifacts to downloads.powerdns.com
        id: upload-provenance
        env:
          SSHKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_SECRET }}
          RSYNCTARGET: ${{ secrets.DOWNLOADS_AUTOBUILT_RSYNCTARGET }}
          HOSTKEY: ${{ secrets.DOWNLOADS_AUTOBUILT_HOSTKEY }}
          PRODUCT: ${{ needs.build.outputs.product-name }}
          VERSION: ${{ needs.build.outputs.version }}
          DOWNLOAD_PATH: ${{ steps.download-provenance.outputs.download-path }}
        if:
          "${{ env.SSHKEY != '' }}"
        shell: bash
        run: |
          mkdir -m 700 -p ~/.ssh
          echo "$SSHKEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$HOSTKEY" > ~/.ssh/known_hosts
          mkdir -m 755 -p "slsa/${PRODUCT}/${VERSION}/"
          mv "${DOWNLOAD_PATH}"/*.jsonl "slsa/${PRODUCT}/${VERSION}"
          rsync -4rlptD slsa/* "$RSYNCTARGET"
