---
name: 'Build and test everything'

on:
  push:
  pull_request:
  workflow_call:
    inputs:
      branch-name:
        description: 'Checkout to a specific branch'
        required: true
        default: ''
        type: string
      runner-docker-image-name:
        description: 'Image name to be used for running all jobs'
        required: false
        default: ''
        type: string
  schedule:
    - cron: '0 22 * * 3'

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

env:
  COMPILER: clang
  CLANG_VERSION: '13'
  # github.workspace variable points to the Runner home folder. Container home folder defined below.
  REPO_HOME: '/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}'
  BUILDER_VERSION: '0.0.0-git1'
  COVERAGE: ${{ github.repository == 'PowerDNS/pdns' && 'yes' || 'no' }}
  LLVM_PROFILE_FILE: "/tmp/code-%p.profraw"
  OPTIMIZATIONS: yes
  INV_CMD: ". ${REPO_HOME}/.venv/bin/activate && inv"
  BRANCH_NAME: ${{ inputs.branch-name || github.ref_name }}

jobs:
  get-runner-container-image:
    name: generate docker runner image name
    runs-on: ubuntu-24.04
    outputs:
      id: ${{ steps.get-runner-image.outputs.image-id }}
      tag: ${{ steps.get-runner-image.outputs.tag }}
    env:
      DEFAULT_IMAGE_TAG: master # update when backporting, e.g. auth-4.9.x
      DOCKER_IMAGE: ${{ inputs.runner-docker-image-name || 'base-pdns-ci-image/debian-12-pdns-base' }}
    steps:
      - id: get-runner-image
        run: |
          echo "image-id=ghcr.io/powerdns/$DOCKER_IMAGE" >> "$GITHUB_OUTPUT"
          echo "tag=$DEFAULT_IMAGE_TAG" >> "$GITHUB_OUTPUT"

  build-auth:
    name: build auth (${{ matrix.builder }})
    if: ${{ !github.event.schedule || vars.SCHEDULED_JOBS_BUILD_AND_TEST_ALL }}
    runs-on: ubuntu-24.04
    needs: get-runner-container-image
    strategy:
      matrix:
        builder: [autotools, meson]
      fail-fast: false
    steps:
      - name: get timestamp for cache
        id: get-stamp
        run: |
          echo "stamp=$(/bin/date +%s)" >> "$GITHUB_OUTPUT"
        shell: bash
      - run: mkdir -p ~/.ccache
      - name: let GitHub cache our ccache data
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: auth-ccache-${{ matrix.builder }}-${{ steps.get-stamp.outputs.stamp }}
          restore-keys: auth-ccache-${{ matrix.builder }}
      - name: set sanitizers
        run: echo "SANITIZERS=${{ matrix.builder == 'meson' && 'address,undefined' || 'asan+ubsan' }}" >> "$GITHUB_ENV"
      - name: Define local action
        run: |
          : Define local action
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0
          mkdir -p local-action
          echo 'Defining local action Dockerfile'
          (
            echo "FROM $image"
            echo "COPY --chown=runner:docker __w $REPO_HOME"
            echo "WORKDIR ${REPO_HOME}"
            echo
            echo -n 'ENV '
          ) > local-action/Dockerfile

          for a in $env_list; do
            echo ' \'
            echo -n " $a='"$(eval echo '$'$a)"'";
          done >> local-action/Dockerfile

          cat >> local-action/Dockerfile <<'EODocker'

          SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]

          RUN <<'EOCommand'

          # install pip build dependencies
          python3 -m venv ${REPO_HOME}/.venv
          . ${REPO_HOME}/.venv/bin/activate && pip install -r ${REPO_HOME}/meson/requirements.txt
          EODocker

          cat >> local-action/Dockerfile <<EODockerQQ
          $INV_CMD install-auth-build-deps

          $INV_CMD ci-autoconf $meson_flags

          $INV_CMD ci-auth-configure $meson_flags -b pdns-$BUILDER_VERSION

          $INV_CMD ci-auth-build $meson_flags # This runs under pdns-$BUILDER_VERSION/pdns/ for make bear

          $INV_CMD ci-auth-install-remotebackend-test-deps
          EODockerQQ


          if [ -n "$meson_flags" ]; then
            cat >> local-action/Dockerfile <<EODockerQQ
          $INV_CMD install-auth-test-deps-only -b geoip
          EODockerQQ
          fi

          cat >> local-action/Dockerfile <<EODockerQQ
          PDNS_BUILD_PATH="../pdns-$BUILDER_VERSION" $INV_CMD ci-auth-run-unit-tests $meson_flags

          EODockerQQ

          if [ "$COVERAGE" == 'yes' ] && [ -n "$meson_flags" ]; then
            cat >> local-action/Dockerfile <<EODockerQQ
            $INV_CMD generate-coverage-info ./pdns-auth-testrunner 'auth' $GITHUB_WORKSPACE

          EODockerQQ
          fi

          # Unclear how to convert 'Coveralls Parallel auth unit'

          cat >> local-action/Dockerfile <<EODockerQQ
          $INV_CMD ci-auth-install $meson_flags

          ccache -s

          EODockerQQ

          # Prepare binaries folder
          if [ -n "$meson_flags" ]; then
            cat >> local-action/Dockerfile <<'EODocker'
            echo "normalized-branch-name=$BRANCH_NAME" | tr "/" "-" >> "$GITHUB_ENV"
            mkdir -p /opt/pdns-auth/bin
            for i in $(find . -maxdepth 1 -type f -executable); do cp ${i} /opt/pdns-auth/bin/; done
            mkdir -p /opt/pdns-auth/sbin; mv /opt/pdns-auth/bin/pdns-auth /opt/pdns-auth/sbin/

          EODocker
          fi

          cat >> local-action/Dockerfile <<'EODocker'
          EOCommand
          EODocker

          cat local-action/Dockerfile
        env:
          image: "${{ needs.get-runner-container-image.outputs.id }}:${{ needs.get-runner-container-image.outputs.tag }}"
          meson_flags: ${{ matrix.builder == 'meson' && '--meson' || '' }}
          FUZZING_TARGETS: yes
          UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=$REPO_HOME/build-scripts/UBSan.supp"
          UNIT_TESTS: yes
          env_list: |
            FUZZING_TARGETS
            UBSAN_OPTIONS
            UNIT_TESTS
            COMPILER
            CLANG_VERSION
            REPO_HOME
            BUILDER_VERSION
            COVERAGE
            LLVM_PROFILE_FILE
            OPTIMIZATIONS
            INV_CMD
            BRANCH_NAME
      - uses: actions/checkout@v4
        with:
          path: local-action/__w
          fetch-depth: 5
          submodules: recursive
          ref: ${{ inputs.branch-name }}
          persist-credentials: false
      - name: look around
        shell: bash
        run: |
          ls
      - name: look at local-action
        shell: bash
        run: |
          ls local-action
      - name: Run local action
        uses: ./local-action
      # - name: Coveralls Parallel auth unit
      #   if: ${{ env.COVERAGE == 'yes' && matrix.builder == 'meson' }}
      #   uses: coverallsapp/github-action@648a8eb78e6d50909eff900e4ec85cab4524a45b
      #   with:
      #     flag-name: auth-unit-${{ env.SANITIZERS }}
      #     path-to-lcov: $GITHUB_WORKSPACE/coverage.lcov
      #     parallel: true
      #     allow-empty: true
      #     fail-on-error: false
      - if: ${{ matrix.builder == 'meson' }}
        name: Store the binaries
        uses: actions/upload-artifact@v4 # this takes 30 seconds, maybe we want to tar
        with:
          name: pdns-auth-${{ matrix.builder}}-${{ env.normalized-branch-name }}
          path: /opt/pdns-auth
          retention-days: 1
