#!/usr/bin/env python
import unittest
import os
import subprocess
import time

class TestCheckConfig(unittest.TestCase):

    def tryDNSDist(self, configTemplate, shouldBeSuccessful=True, delay=1):
        conffile = 'dnsdist_test.conf'
        with open(conffile, 'w') as conf:
            conf.write("-- Autogenerated by dnsdisttests.py\n")
            conf.write(configTemplate)

        dnsdistcmd = [os.environ['DNSDISTBIN'], '-C', conffile, '--check-config']

        with open(os.devnull, 'w') as fdDevNull:
            dnsdist = subprocess.Popen(dnsdistcmd, close_fds=True, stdout=fdDevNull)

        if dnsdist.poll() is None:
            time.sleep(delay)
            self.assertNotEqual(dnsdist.poll(), None)

        if shouldBeSuccessful:
            self.assertEquals(dnsdist.returncode, 0)
        else:
            self.assertNotEqual(dnsdist.returncode, 0)

    def testWorkingConfig(self):
        """
        CheckConfig: Working configuration
        """
        configTemplate = """
            newServer{address="127.0.0.1:53"}
            truncateTC(true)
            addAction(AndRule{QTypeRule(DNSQType.ANY), TCPRule(false)}, TCAction())
            addAction(RegexRule("evil[0-9]{4,}\\\\.regex\\\\.tests\\\\.powerdns\\\\.com$"), RCodeAction(DNSRCode.REFUSED))
            mySMN = newSuffixMatchNode()
            mySMN:add(newDNSName("nameAndQtype.tests.powerdns.com."))
            addAction(AndRule{SuffixMatchNodeRule(mySMN), QTypeRule("TXT")}, RCodeAction(DNSRCode.NOTIMP))
            addAction(makeRule("drop.test.powerdns.com."), DropAction())
        """

        self.tryDNSDist(configTemplate)

    def testEmptyConfig(self):
        """
        CheckConfig: Empty config
        """
        configTemplate = ""
        self.tryDNSDist(configTemplate)

    def testInvalidFunction(self):
        """
        CheckConfig: Invalid function
        """
        configTemplate = """
          oldServer { address="127.0.0.1:55" }
        """
        self.tryDNSDist(configTemplate, False)

    def testInvalidParam(self):
        """
        CheckConfig: Invalid parameter
        """
        configTemplate = """
          addACL("127.0.0.355")
        """
        self.tryDNSDist(configTemplate, False)

    def testSyntaxError(self):
        """
        CheckConfig: Syntax error
        """
        configTemplate = "blablabla"
        self.tryDNSDist(configTemplate, False)
