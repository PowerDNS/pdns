#include <net/sock.h>
#include <uapi/linux/udp.h>
#include <uapi/linux/ip.h>
#include <uapi/linux/ipv6.h>

#define DNS_PORT      53

// do not use libc includes because this causes clang
// to include 32bit headers on 64bit ( only ) systems.
typedef __u8  uint8_t;
typedef __u16 uint16_t;
typedef __u32 uint32_t;
typedef __u64 uint64_t;
#define memcpy __builtin_memcpy

/*
 *  Helper pointer to parse the incoming packets
 */
struct cursor {
  void *pos;
  void *end;
};

/*
 *  Store the VLAN header
 */
struct vlanhdr {
  uint16_t tci;
  uint16_t encap_proto;
};

/*
 *  Store the DNS header
 */
struct dnshdr {
  uint16_t id;
  union {
  	struct {
#if BYTE_ORDER == LITTLE_ENDIAN
  		uint8_t  rd     : 1;
  		uint8_t  tc     : 1;
  		uint8_t  aa     : 1;
  		uint8_t  opcode : 4;
  		uint8_t  qr     : 1;

  		uint8_t  rcode  : 4;
  		uint8_t  cd     : 1;
  		uint8_t  ad     : 1;
  		uint8_t  z      : 1;
  		uint8_t  ra     : 1;
#elif BYTE_ORDER == BIG_ENDIAN || BYTE_ORDER == PDP_ENDIAN
  		uint8_t  qr     : 1;
  		uint8_t  opcode : 4;
  		uint8_t  aa     : 1;
  		uint8_t  tc     : 1;
  		uint8_t  rd     : 1;

  		uint8_t  ra     : 1;
  		uint8_t  z      : 1;
  		uint8_t  ad     : 1;
  		uint8_t  cd     : 1;
  		uint8_t  rcode  : 4;
#endif
  	}        as_bits_and_pieces;
  	uint16_t as_value;
  } flags;
  uint16_t qdcount;
  uint16_t ancount;
  uint16_t nscount;
  uint16_t arcount;
};

/*
 * Store the qname and qtype
 */
struct dns_qname
{
  uint8_t qname[255];
  uint16_t qtype;
};

BPF_TABLE("hash", uint32_t, uint64_t, v4filter, 1024);
BPF_TABLE("hash", struct in6_addr, uint64_t, v6filter, 1024);
BPF_TABLE("hash", struct dns_qname, uint64_t, qnamefilter, 1024);

/*
 *  Initializer of a cursor pointer
 */
static inline void cursor_init(struct cursor *c, struct xdp_md *ctx)
{
  c->end = (void *)(long)ctx->data_end;
  c->pos = (void *)(long)ctx->data;
}

/* 
 * Header parser functions
 */
#define PARSE_FUNC_DECLARATION(STRUCT)  							\
static inline struct STRUCT *parse_ ## STRUCT (struct cursor *c)  \
{  																\
  struct STRUCT *ret = c->pos;									\
  if (c->pos + sizeof(struct STRUCT) > c->end)					\
  	return 0;													\
  c->pos += sizeof(struct STRUCT);								\
  return ret;														\
}

PARSE_FUNC_DECLARATION(ethhdr)
PARSE_FUNC_DECLARATION(vlanhdr)
PARSE_FUNC_DECLARATION(iphdr)
PARSE_FUNC_DECLARATION(ipv6hdr)
PARSE_FUNC_DECLARATION(udphdr)
PARSE_FUNC_DECLARATION(dnshdr)

/*
 * Parse ethernet frame and fill the struct
 */
static inline struct ethhdr *parse_eth(struct cursor *c, uint16_t *eth_proto)
{
  struct ethhdr  *eth;

  if (!(eth = parse_ethhdr(c)))
  	return 0;

  *eth_proto = eth->h_proto;
  if (*eth_proto == bpf_htons(ETH_P_8021Q)
  ||  *eth_proto == bpf_htons(ETH_P_8021AD)) {
  	struct vlanhdr *vlan;

  	if (!(vlan = parse_vlanhdr(c)))
  		return 0;

  	*eth_proto = vlan->encap_proto;
  	if (*eth_proto == bpf_htons(ETH_P_8021Q)
  	||  *eth_proto == bpf_htons(ETH_P_8021AD)) {
  		if (!(vlan = parse_vlanhdr(c)))
  			return 0;

  		*eth_proto = vlan->encap_proto;
  	}
  }
  return eth;
}

/*
 *  Recalculate the checksum
 */
static inline void update_checksum(uint16_t *csum, uint16_t old_val, uint16_t new_val)
{
  uint32_t new_csum_value;
  uint32_t new_csum_comp;
  uint32_t undo;

  undo = ~((uint32_t)*csum) + ~((uint32_t)old_val);
  new_csum_value = undo + (undo < ~((uint32_t)old_val)) + (uint32_t)new_val;
  new_csum_comp = new_csum_value + (new_csum_value < ((uint32_t)new_val));
  new_csum_comp = (new_csum_comp & 0xFFFF) + (new_csum_comp >> 16);
  new_csum_comp = (new_csum_comp & 0xFFFF) + (new_csum_comp >> 16);
  *csum = (uint16_t)~new_csum_comp;
}

/*
 * Set the TC bit and swap UDP ports
 */
static inline int set_tc_bit(struct udphdr *udp, struct dnshdr *dns)
{
  uint16_t old_val = dns->flags.as_value;

  // change the DNS flags
  dns->flags.as_bits_and_pieces.ad = 0;
  dns->flags.as_bits_and_pieces.qr = 1;
  dns->flags.as_bits_and_pieces.tc = 1;

  // change the UDP destination to the source
  udp->dest   = udp->source;
  udp->source = bpf_htons(DNS_PORT);

  // calculate and write the new checksum
  update_checksum(&udp->check, old_val, dns->flags.as_value);

  // bounce
  return 0;
}

/*
 * Check DNS QName
 * Returns 1 if (modified) message needs to be replied
 *         0 if message needs to go through (i.e. pass)
 */
static inline int check_qname(struct cursor *c)
{
  struct dns_qname qkey = {0};
  uint8_t qname_byte;
  uint16_t qtype;
  int length = 0;

  for(int i = 0; i<255; i++) {
  	if (bpf_probe_read_kernel(&qname_byte, sizeof(qname_byte), c->pos)) {
  		return 0;
  	}
  	c->pos += 1;
  	if (qname_byte == 0 || (length == i) * qname_byte > 63 ) {
  		break;
  	} else {
  		if (qname_byte >= 'A' && qname_byte <= 'Z') {
  			qkey.qname[i] = qname_byte + ('a' - 'A');
  		} else {
  			qkey.qname[i] = qname_byte;
  		}
  	}
  }

  // If the last read qbyte is not 0 incorrect QName format), return XDP_PASS
  if (qname_byte != 0) {
  	return 0;
  }

  // Get QType
  if(bpf_probe_read_kernel(&qtype, sizeof(qtype), c->pos)) {
  	return 0;
  }

  uint64_t* counter ;

  // Check if Qname/Qtype is blocked
  qkey.qtype = bpf_htons(qtype);
  counter = qnamefilter.lookup(&qkey);
  if (counter) {
       	__sync_fetch_and_add(counter, 1);
  	return 1;
  }

  // Check with Qtype 255 (*)
  qkey.qtype = 255;

  counter = qnamefilter.lookup(&qkey);
  if (counter) {
        __sync_fetch_and_add(counter, 1);
  	return 1;
  }

  return 0; // XDP_PASS
}

/*
 * Parse IPv4 DNS mesage.
 * Returns 1 if message needs to go through (i.e. pass)
 *        -1 if something went wrong and the packet needs to be dropped
 *         0 if (modified) message needs to be replied
 */
static inline int udp_dns_reply_v4(struct cursor *c, uint32_t key)
{
  struct udphdr  *udp;
  struct dnshdr  *dns;

  if (!(udp = parse_udphdr(c)) || udp->dest != bpf_htons(DNS_PORT)) {
  	return 1;
  }

  // check that we have a DNS packet
  if (!(dns = parse_dnshdr(c))) {
  	return 1;
  }	

  // if the address is blocked, reply with bit TC
  uint64_t* counter = v4filter.lookup(&key);

  if (counter) {
        __sync_fetch_and_add(counter, 1);
  	return set_tc_bit(udp, dns);
  } else {
  	if (check_qname(c)) {
  		return set_tc_bit(udp, dns);
  	}
  }

  return 1;
}

/*
 * Parse IPv6 DNS mesage.
 * Returns 1 if message needs to go through (i.e. pass)
 *        -1 if something went wrong and the packet needs to be dropped
 *         0 if (modified) message needs to be replied
 */
static inline int udp_dns_reply_v6(struct cursor *c, struct in6_addr key)
{
   struct udphdr  *udp;
   struct dnshdr  *dns;

  
  if (!(udp = parse_udphdr(c)) || udp->dest != bpf_htons(DNS_PORT)) {
  	return 1;
  }

  // check that we have a DNS packet
  ;
  if (!(dns = parse_dnshdr(c))) {
  	return 1;
  }

  // if the address is blocked, reply with bit TC
  uint64_t* counter = v6filter.lookup(&key);

  if (counter) {
        __sync_fetch_and_add(counter, 1);
  	return set_tc_bit(udp, dns);
  } else {
  	if (check_qname(c)) {
  		return set_tc_bit(udp, dns);
  	}
  }

  return 1;
}

int xdp_dns_filter(struct xdp_md *ctx)
{
  // store variables
  struct cursor   c;
  struct ethhdr  *eth;
  uint16_t        eth_proto;
  struct iphdr   *ipv4;
  struct ipv6hdr *ipv6;
  int            r = 0;

  // initialise the cursor
  cursor_init(&c, ctx);

  // pass the packet if it is not an ethernet one
  if ((eth = parse_eth(&c, &eth_proto))) {
  	// IPv4 packets
  	if (eth_proto == bpf_htons(ETH_P_IP))
  	{
  		if (!(ipv4 = parse_iphdr(&c)) || bpf_htons(ipv4->protocol != IPPROTO_UDP)) {
  			return XDP_PASS;
  		}
  		if ((r = udp_dns_reply_v4(&c, bpf_htonl(ipv4->saddr)))) {
  			return r < 0 ? XDP_ABORTED : XDP_PASS;
  		}
  
          // swap src/dest IP addresses
  		uint32_t swap_ipv4 = ipv4->daddr;
  		ipv4->daddr = ipv4->saddr;
  		ipv4->saddr = swap_ipv4;
  	}
  	// IPv6 packets
  	else if (eth_proto == bpf_htons(ETH_P_IPV6))
  	{
  		;
  		if (!(ipv6 = parse_ipv6hdr(&c)) || bpf_htons(ipv6->nexthdr != IPPROTO_UDP)) {
  			return XDP_PASS;
  		} 
  		if ((r = udp_dns_reply_v6(&c, ipv6->saddr))) {
  			return r < 0 ? XDP_ABORTED : XDP_PASS;
  		}
  
          // swap src/dest IP addresses
  		struct in6_addr swap_ipv6 = ipv6->daddr;
  		ipv6->daddr = ipv6->saddr;
  		ipv6->saddr = swap_ipv6;

  	}
  	// pass all non-IP packets
  	else {
  		return XDP_PASS;
  	}
  } else {
  	return XDP_PASS;
  }

    // swap MAC addresses
  uint8_t swap_eth[ETH_ALEN];
  memcpy(swap_eth, eth->h_dest, ETH_ALEN);
  memcpy(eth->h_dest, eth->h_source, ETH_ALEN);
  memcpy(eth->h_source, swap_eth, ETH_ALEN);

  // bounce the request
  return XDP_TX;
}
