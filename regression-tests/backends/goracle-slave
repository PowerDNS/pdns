	context=${context}-presigned-goracle
	[ -z "$GORACLE2USER" ] && GORACLE2USER=pdns2
	[ -z "$GORACLE2PASSWD" ] && GORACLE2PASSWD=pdns

	echo "START ../modules/goraclebackend/drop-schema.goracle.sql;" | sqlplus -S $GORACLE2USER/$GORACLE2PASSWD@xe > goracle2.log
	echo "START ../modules/goraclebackend/schema.goracle.sql;" | sqlplus -S $GORACLE2USER/$GORACLE2PASSWD@xe >> goracle2.log

	cat > pdns-goracle2.conf << __EOF__
module-dir=./modules
launch=goracle
goracle-home=$ORACLE_HOME
goracle-sid=$ORACLE_SID
goracle-nls-lang=$NLS_LANG

goracle-tnsname=xe
goracle-user=$GORACLE2USER
goracle-password=$GORACLE2PASSWD
__EOF__

	if [[ $context != *nodnssec* ]]
	then
		echo "goracle-dnssec" >> pdns-goracle2.conf
	fi

	for zone in $(grep 'zone ' named.conf  | cut -f2 -d\" | tac)
	do
		echo "INSERT INTO domains (id, name, type, master) VALUES(domains_id_sequence.nextval, '$zone', 'SLAVE', '127.0.0.1:$port');" | sqlplus -S $GORACLE2USER/$GORACLE2PASSWD@xe >> goracle2.log
	done

	../pdns/pdnssec --config-dir=. --config-name=goracle2 import-tsig-key test $ALGORITHM $KEY
	../pdns/pdnssec --config-dir=. --config-name=goracle2 activate-tsig-key tsig.com test slave
	if [[ $skipreasons != *nolua* ]]
	then
		../pdns/pdnssec --config-dir=. --config-name=goracle2 set-meta stest.com AXFR-SOURCE 127.0.0.2
	fi

	port=$((port+100))

	$RUNWRAPPER $PDNS2 --daemon=no --local-port=$port --config-dir=. \
		--config-name=goracle2 --socket-dir=./ --no-shuffle \
		--send-root-referral --slave --retrieval-threads=4 \
		--slave-cycle-interval=300 --experimental-dname-processing &

	echo 'waiting for zones to be slaved'
	loopcount=0
	while [ $loopcount -lt 30 ]
	do
		sleep 5
		todo=$(sqlplus -S $GORACLE2USER/$GORACLE2PASSWD@xe << __EOF__
set pagesize 0 feedback off verify off heading off echo off;
SELECT COUNT(id) FROM domains WHERE last_check IS NULL;
exit;
__EOF__
)
		if [ $todo = 0 ]
		then
			break
		fi
		let loopcount=loopcount+1
	done
	if [ $todo -ne 0 ]
	then
		echo "AXFR FAILED" >> failed_tests
		exit
	fi
