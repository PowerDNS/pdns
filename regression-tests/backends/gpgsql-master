source ./backends/gsql-common
CONFIG_NAME=gpgsql

case $context in
	gpgsql-nodnssec | gpgsql | gpgsql-nsec3 | gpgsql-nsec3-optout | gpgsql-nsec3-narrow | gpgsql_sp)
		[ -z "$GPGSQLDB" ] && GPGSQLDB=pdnstest
		[ -z "$GPGSQLUSER" ] && GPGSQLUSER=$(whoami)

		dropdb --user="$GPGSQLUSER" "$GPGSQLDB"	|| echo ignoring dropdb failure
		createdb --user="$GPGSQLUSER" "$GPGSQLDB"	|| echo ignoring createdb failure
		psql --user="$GPGSQLUSER" "$GPGSQLDB" < ../modules/gpgsqlbackend/schema.pgsql.sql
		tosql gpgsql | psql --user="$GPGSQLUSER" "$GPGSQLDB" 2>&1 | uniq -c
                psql --user="$GPGSQLUSER" -c "ANALYZE" "$GPGSQLDB"

		cat > pdns-gpgsql.conf << __EOF__
module-dir=./modules
launch=gpgsql
gpgsql-dbname=$GPGSQLDB
gpgsql-user=$GPGSQLUSER

zone-cache-refresh-interval=120
__EOF__

		gsql_master gpgsql nodyndns
		;;

	*)
		nocontext=yes
esac

if [[ "$context" = "gpgsql_sp" ]]; then
    cat >> pdns-gpgsql.conf << '__EOF__'
gpgsql-basic-query=SELECT * FROM basic_query($1, $2)
__EOF__
    psql --user="$GPGSQLUSER" "$GPGSQLDB" << '__EOF__'
CREATE FUNCTION basic_query(incoming_type varchar(10), incoming_name varchar(255))
RETURNS TABLE
(
  content               VARCHAR(65535),
  ttl                   INT,
  prio                  INT,
  type                  VARCHAR(10),
  domain_id             INT,
  disabled              BOOL,
  name                  VARCHAR(255),
  auth                  BOOL
)
AS $$
SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=false and type=incoming_type and name=incoming_name;
$$ LANGUAGE SQL;
__EOF__
fi
