	context=${context}-presigned
	perl -pe 's/type primary;/type secondary;\n\tprimaries { 127.0.0.1:'$port'; };/ ;s/file "([^"]+)/file "$1-slave/' < named.conf > named-slave.conf

	for zone in $(grep 'zone ' named.conf  | cut -f2 -d\")
	do
		if [ "$zone" = "." ]; then
			zone="ROOT"
		fi
		rm -rf zones/$zone-slave
	done

	rm -f dnssec-slave.sqlite3

	$PDNSUTIL --config-dir=. create-bind-db dnssec-slave.sqlite3

	set +e
	echo $skipreasons | grep -q nodnssec
	if [ $? -ne 0 ]
	then
		sqlite3 dnssec-slave.sqlite3 "select name from domains where name = 'tsig.com'" | grep -q tsig.com
		if [ $? -ne 0 ]; then
			sqlite3 dnssec-slave.sqlite3 "INSERT INTO tsigkeys (name, algorithm,secret) VALUES('test', '$ALGORITHM', '$KEY')"
			sqlite3 dnssec-slave.sqlite3 "INSERT INTO domainmetadata (domain, kind, content) SELECT 'tsig.com', 'AXFR-MASTER-TSIG', 'test'"
		fi
		echo $skipreasons | grep -q nolua
		if [ $? -ne 0 ]
		then
			sqlite3 dnssec-slave.sqlite3 "INSERT INTO domainmetadata (domain,kind,content) SELECT 'stest.com','AXFR-SOURCE','127.0.0.2'"
		fi
	fi
	set -e

	port=$((port+100))

	$RUNWRAPPER $PDNS2 --daemon=no --local-port=$port --socket-dir=./ \
		--no-shuffle --launch=bind --bind-config=./named-slave.conf --secondary \
		--retrieval-threads=1  --config-name=bind-slave \
		--dnsupdate=yes \
		--cache-ttl=$cachettl --no-config --dname-processing --bind-dnssec-db=./dnssec-slave.sqlite3 \
		--module-dir=./modules &
	echo 'waiting for zones to be loaded'
	bindwait bind-slave
